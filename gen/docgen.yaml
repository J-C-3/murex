SourcePath: .
SourceExt: _doc.yaml

Categories:
  - ID: commands
    Title: Command Reference
    Description: |-
      This section is a glossary of _murex_ builtin commands.
      
      Because _murex_ is loosely modelled on the functional paradigm, it means
      all language constructs are exposed via functions and those are typically
      builtins because they can share the _murex_ runtime virtual machine.
      However any executable command can also be called from within _murex_;
      be that either via the `exec` builtin or natively like you would from any
      Linux, UNIX, or even Windows command prompt.

      ## Other Reference Material

      ### Language Guides

      1. [Language Tour](GUIDE.quick-start.md), which is an introduction into
         the _murex_ language.

      2. [Rosetta Stone](user-guide/rosetta-stone.md), which is a reference
         table comparing Bash syntax to _murex_'s.

      ### _murex_'s Source Code

      The source for each of these builtins can be found on [Github](https://github.com/lmorg/murex/tree/master/builtins/core).

      ### Shell Commands For Querying Builtins

      From the shell itself: run `builtins` to list the builtin command.

      If you require a manual on any of those commands, you can run `murex-docs`
      to return the same markdown-formatted document as those listed below. eg

      ```
      murex-docs trypipe
      ```
  
    Templates:
    - OutputPath: docs/commands
      CategoryFile: ../GUIDE.builtin-functions.md
      OutputExt: .md
      CategoryTemplate: gen/commands-md-cat.tmpl
      DocumentTemplate: gen/commands-md-doc.tmpl

    - OutputPath: builtins/docs
      CategoryFile: 000_summaries_commands_docgen.go
      OutputExt: _commands_docgen.go
      CategoryTemplate: gen/commands-go-cat.tmpl
      DocumentTemplate: gen/commands-go-doc.tmpl

    - OutputPath: builtins
      CategoryFile: docgen_test.go
      OutputExt: _commands_docgen.go
      CategoryTemplate: gen/commands-go_test-cat.tmpl
      DocumentTemplate:

  - ID: mkarray
    Title: mkarray
    Description:
    Templates:
    - OutputPath: docs/mkarray
      CategoryFile: ../../gen/includes/autogenerated.mkarray.inc.md
      OutputExt: .md
      CategoryTemplate: gen/mkarray-md-cat.tmpl
      DocumentTemplate: gen/mkarray-md-doc.tmpl

  - ID: optional
    Title: Optional Command Reference
    Description: |-
      This section is a glossary of _murex_ optional builtins.
      
      These builtins likely wont be compiled with _murex_ unless you specifically
      request them to be. This might be because they duplicate functionality
      already available on POSIX systems or introduce more complex dependencies.
      It might also be because that specific builtin is in an alpha stage and thus
      not ready to ship with _murex_.

      ## Other Reference Material

      ### Language Guides

      1. [Core Builtins](./GUIDE.builtin-functions.md), for docs
         on the core builtins.

      2. [Language Tour](GUIDE.quick-start.md), which is an introduction into
         the _murex_ language.

      3. [Rosetta Stone](user-guide/rosetta-stone.md), which is a reference
         table comparing Bash syntax to _murex_'s.

      ### _murex_'s Source Code

      The source for each of these builtins can be found on [Github](https://github.com/lmorg/murex/tree/master/builtins/optional).

      ### Shell Commands For Querying Builtins

      From the shell itself: run `builtins` to list the builtin command.

      If you require a manual on any of those commands, you can run `murex-docs`
      to return the same markdown-formatted document as those listed below. eg

      ```
      murex-docs trypipe
      ```
    Templates:
    - OutputPath: docs/optional
      CategoryFile: ../GUIDE.optional-commands.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/commands-md-doc.tmpl

    - OutputPath: builtins/docs
      CategoryFile: 
      OutputExt: _commands_docgen.go
      CategoryTemplate: 
      DocumentTemplate: gen/commands-go-doc.tmpl

  - ID: parser
    Title: Parser Reference
    Description: |-
      This section is a glossary of _murex_ tokens and parser behavior.
  
      ## Other Reference Material

      ### Language Guides

      1. [Language Tour](GUIDE.quick-start.md), which is an introduction into
         the _murex_ language.

      2. [Rosetta Stone](user-guide/rosetta-stone.md), which is a reference
         table comparing Bash syntax to _murex_'s.

      3. [Builtins](./GUIDE.builtin-functions.md), for docs on the core builtins.

      ### _murex_'s Source Code

      The parser is located _murex_'s source under the `lang/` path of the project
      files.
  
    Templates:
    - OutputPath: docs/parser
      CategoryFile: ../GUIDE.parser.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/parser-md-doc.tmpl

  # events:

  # types:
  - ID: types
    Title: Data-Type Reference
    Description: |-
      This section is a glossary of data-types which _murex_ is natively aware.

      Most of the time you will not need to worry about typing in_murex_ as the
      shell is designed around productivity as opposed to strictness despite
      generally following a strictly typed design.

      Read the [Language Tour](GUIDE.quick-start.md) for more detail on this topic.

      ## Definitions
      
      For clarity, it is worth explaining a couple of terms:
      
      1. "Data-types" in _murex_ are a description of the format of data. This
      means that while any stdio stream in UNIX will by "bytes", _murex_ might
      label that data as being a JSON string or CSV file (for example) which
      means any builtins that parse that stdio stream, for example to return
      the first 8 items, would need to parse those types differently. Thus a
      "data-type" in _murex_ is actually more than just a description of a data
      structure; it is a series of APIs to marshall and unmarshall data from
      complex file formats. This enables you to use the same command line tools
      to query any type of output.

      2. "Primitive" data-types refer to types that are the required by _murex_
      to function. These will be `int`, `float` / `number`, `bool`, `string`,
      `generic`, `json`, and `null`. All other data-types are optional albeit
      still recommended (unless described otherwise).

      ## Feature Sets
      
      Since not all data formats are equal (for example the TOML file format
      doesn't support naked arrays where as JSON does), you may find some
      features missing in some data-types which are present in others. If in
      doubt then refer to the manual here or check the API manual for more
      details about specific hooks.

    Templates:
    - OutputPath: docs/types
      CategoryFile: ../GUIDE.type-system.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/types-md-doc.tmpl

    #- OutputPath: builtins/docs
    #  CategoryFile: 000_summaries_commands_docgen.go
    #  OutputExt: _commands_docgen.go
    #  CategoryTemplate: gen/commands-go-cat.tmpl
    #  DocumentTemplate: gen/commands-go-doc.tmpl

    #- OutputPath: builtins
    #  CategoryFile: docgen_test.go
    #  OutputExt: _commands_docgen.go
    #  CategoryTemplate: gen/commands-go_test-cat.tmpl
    #  DocumentTemplate: 

  # pipes:

  # apis:
  - ID: apis
    Title: API Reference
    Description: |-
      This section is a glossary of APIs.
      
      These APIs are provided for reference for any developers wishing to write
      their own builtins. However some APIs are still worth being aware of even
      when just writing _murex_ scripts because they provide a background into
      the internal logic of _murex_'s runtime.

    Templates:
    - OutputPath: docs/apis
      CategoryFile: ../GUIDE.apis.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/apis-md-doc.tmpl

  # user guide:
  - ID: user-guide
    Title: User Guide
    Description: |-
      This section contains miscellaneous documents on using and configuring the
      shell and _murex_'s numerous features.

      ## Other Reference Material

      There are other sections for which are dedicated to _murex_'s parser, builtin
      commands and such like:

      ### Language Guides

      1. [Language Tour](GUIDE.quick-start.md), which is an introduction into
         the _murex_ language.

      2. [Rosetta Stone](user-guide/rosetta-stone.md), which is a reference
         table comparing Bash syntax to _murex_'s.

      3. [Builtins](./GUIDE.builtin-functions.md), for docs on the core builtins.

      4. [Syntax](./GUIDE.parser.md), lists tokens and other syntactic sugar
         supported by _murex_'s parser.
    Templates:
    - OutputPath: docs/user-guide
      CategoryFile: ../USER-GUIDE.md
      OutputExt: .md
      CategoryTemplate: gen/murex-md-cat.tmpl
      DocumentTemplate: gen/userguide-md-doc.tmpl

  # blog
  - ID: blog
    Title: Blog
    Description: |-
      Collection of _murex_ related documents and personal thoughts.
    Templates:
    - OutputPath: docs/blog
      CategoryFile: ../BLOG.md
      OutputExt: .md
      CategoryTemplate: gen/blog-md-cat.tmpl
      DocumentTemplate: gen/blog-md-doc.tmpl

  # changelog
  - ID: changelog
    Title: Change Log
    Description: |-
      Track new features, any breaking changes, and the release history here.
    Templates:
    - OutputPath: docs/changelog
      CategoryFile: ../CHANGELOG.md
      OutputExt: .md
      CategoryTemplate: gen/changelog-md-cat.tmpl
      DocumentTemplate: gen/changelog-md-doc.tmpl
