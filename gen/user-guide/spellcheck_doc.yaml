- DocumentID: spellcheck
  Title: >-
    Spellcheck
  CategoryID: user-guide
  Summary: >-
    How to enable inline spellchecking
  Description: |-
    _murex_ supports inline spellchecking, where errors are underlined. For example

    [![asciicast](https://asciinema.org/a/408024.svg)](https://asciinema.org/a/408024)

    However to use there there needs to be a few satisfied prerequisites, not all
    of which will be enabled by default:

    ### CLI Spellchecker (3rd Party Software)

    A CLI spellchecker needs to be installed. The recommendation is `aspell`. This
    might already be installed by default with your OS but typically isn't.

    Please consult your OS docs for how to install software.

    ### _murex_ Config

    #### ANSI Escape Sequences

    ANSI escape sequences need to be enabled (which they are by default). This
    option is found in `config` under **shell**, **color**.

    #### Spellcheck Enable

    Spellcheck needs to be enabled. This option can be found in `config` under
    **shell**, **spellcheck-enabled**.

    To enable this run:

    ```
    config: set shell spellcheck-enabled true
    ```

    ...or add the above line to your _murex_ profile, `~/.murex_profile` to make
    the change persistent.

    > Please note that this option will automatically be enabled is `aspell` is
    > installed.

    #### Spellcheck _murex_ Code

    This shouldn't need tweaking if you're running `aspell` but other spellcheckers
    will require updated code. The default will look something like this:

    ```
    » config: get shell spellcheck-block
    { -> aspell list }
    ```

    ### How To Write Your Own `spellcheck-block`

    You might legitimately want to run a different spellchecker, and if so you'll
    need to write your own **spellcheck-block**. Fortunately this is simple:

    The function reads the command line from STDIN, if the spellchecker reads lines
    from parameters rather than STDIN you'll need to write something equivalent to
    the following

    ```
    {
        # This is a theoretical example. It will not work generically.
        -> set: line
        newspellchecker --check "$line"
    }
    ```

    The output of the function must me an array containing the misspelt words only.
    That array can be JSON just as long as you have set STDOUT's data type to
    `json`. Similarly, other supported _murex_ data types can be used too. However
    in general you might just want to go with a misspelling per line as it's pretty
    POSIX friendly and thus most spellcheckers are likely to support it. eg

    ```
    » out "a list of misspelt words: qwert fuubar madeupword" -> aspell: list
    qwert
    fuubar
    madeupword
    ```

    ### User Dictionary

    _murex_ has it's own user dictionary, which is held as a JSON array:
    
    ```
    » config: get shell spellcheck-user-dictionary
    ["murex"]
    ```

    You can add words to a user dictionary via:
    
    ```
    » config: eval shell spellcheck-user-dictionary { -> append "myword" }
    ```

    or

    ```
    » config: eval shell spellcheck-user-dictionary { -> alter: --merge / (["word1", "word2", "word3"]) }
    ```

    > Don't forget to record these in your _murex_ profile, `~/.murex_profile` to
    > make the changes persistent.

    #### Ignored By Default

    Sometimes commands are not valid words in ones native language. Thus any words
    that fall into the following categories are ignored by default:

    * words that are also the names of commands found in `$PATH`
    * words that are the names of _murex_ functions (defined via `function`)
    * words that are builtins (eg `config`)
    * any global aliases
    * also any words that are also the names of global variables
  Synonyms:
  Related:
  - commands/config
  - commands/append
  - commands/alter
  - commands/set
  - code-block
  - parser/curly-brace
  - ansi
  - user-guide/profile
  - types/json


