alias ls=ls --color=auto
alias grep=grep --color=auto
alias egrep=egrep --color=auto

if { which: systemctl } {
    private autocomplete.systemctl {
        # Returns all known systemd unit files
        systemctl: list-unit-files -> !regexp m/unit files listed/ -> [:0] -> cast str
    }

    test unit private autocomplete.systemctl {
        "StdoutRegex": (shutdown\.target),
        "StdoutType":  "str",
        "StdoutBlock": ({
            -> len -> set len;
            if { = len>0 } then {
                out "Len greater than 0"
            } else {
                err "No elements returned"
            }
        }),
        "StdoutIsArray": true
    }

    function autocomplete.systemctl.flags {
        # Parses `systemctl --help` looking for flags then returns `autocomplete` config based on those flags
        systemctl: --help -> @[Unit Commands:..]s -> regexp m/(NAME|PATTERN)/ -> tabulate: --map --key-inc-hint -> formap key val {
            out ("$key": [{
                "Dynamic": ({ autocomplete.systemctl }),
                "ListView": true,
                "Optional": false,
                "AllowMultiple": true
            }],)
        }
        out ("": [{}]) # dummy value so there's no trailing comma
    }

    autocomplete set systemctl ([
        {
            "DynamicDesc": ({
                systemctl: --help -> @[..Unit Commands:]s -> tabulate: --column-wraps --map --key-inc-hint --split-space
            }),
            "Optional": true,
            "AllowMultiple": false
        },
        {
            "DynamicDesc": ({
                systemctl: --help -> @[Unit Commands:..]s -> tabulate: --column-wraps --map --key-inc-hint
            }),
            "Optional": false,
            "AllowMultiple": false,
            "FlagValues": {
                ${ autocomplete.systemctl.flags }
            }
        }
    ])

    !function autocomplete.systemctl.flags

}

# I have a feeling this is old code that needs replacing with the OSX code 
#private kill-autocomplete {
#    test define ps {
#        "ExitNum": 0
#    }
#
#    test define map {
#        "StdoutRegex": (\{(".*?":".*?",?)+\})
#    }
#
#    ps <test_ps> -A -o pid,cmd --no-headers -> set ps
#    map <test_map> { $ps[:0] } { $ps -> regexp 'f/^[ 0-9]+ (.*)$' }
#}
#
#test unit private kill-autocomplete {
#    "StdoutType": "json",
#    "StdoutRegex": "\\{\\\"[0-9]+\\\":\\\".*?\\\"(,|)\\}"
#}

function progress {
    # Pulls the read progress of a Linux pid via /proc/$pid/fdinfo (only runs on Linux)

    if { = `+"`${os}`==`linux`"+` } then {
        params -> [ 1 ] -> set pid
        
        g <!null> /proc/$pid/fd/* -> regexp <!null> (f#/proc/[0-9]+/fd/([0-9]+)) -> foreach <!null> fd {
            trypipe <!null> {
                open /proc/$pid/fdinfo/$fd -> cast yaml -> [ pos ] -> set pos
                readlink: /proc/$pid/fd/$fd -> set file
                du -b $file -> [ :0 ] -> set int size
                if { = size > 0 } then {
                    = ($pos/$size)*100 -> set int percent
                    out "$percent% ($pos/$size) $file"
                }
            }
        }
    }
}

autocomplete set progress {
    [{
        "DynamicDesc": ({
            ps -A -o pid,cmd --no-headers -> set ps
            map { $ps[:0] } { $ps -> regexp 'f/^[ 0-9]+ (.*)$' }
        }),
        "ListView": true
    }]
}

config set shell stop-status-func {
    progress $PID
}

if { or { $WSLENV } { $WSL_DISTRO_NAME } } then {
    trypipe {
        mount \
            -> regexp (m/[A-Z]:\\/) -> [:2] \
            -> cast str -> format json \
            -> config: set wsl windows-mounts
    }
}