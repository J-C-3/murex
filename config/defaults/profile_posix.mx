#config set shell prompt {
#    out "${pwd -> egrep -o '[^/]+$'} » "
#}
#
#config set shell prompt-multiline {
#    let len = ${pwd_short -> wc -c} - 1
#    printf "%${$len}s » " $linenum
#}

function pwd_short {
    # Normalise path to it's short form
    pwd -> regexp "s#^$HOME#\~#"
}

config: set shell prompt {
    exitnum -> !if {
        out "{RESET}{YELLOW}${pwd_short -> egrep -o '[^/]+$'} {GREEN}»{RESET} "
    } else {
        out "{RESET}{YELLOW}${pwd_short -> egrep -o '[^/]+$'} {RED}»{RESET} "
    }
}

config: set shell prompt-multiline {
    let len = ${pwd_short -> egrep -o '[^/]+$' -> wc -c} - 1
    printf "%${$len}s » " $linenum
}

autocomplete set man { [{
    "IncExePath": true
}] }

autocomplete set man-summary { [{
    "IncExePath": true,
    "AllowMultiple": true
}] }

autocomplete set which { [{
    "IncExePath": true
}] }

autocomplete set whereis { [{
    "IncExePath": true
}] }

autocomplete set sudo { [
    {
        "IncFiles": true,
        "IncDirs": true,
        "IncExePath": true
    },
    {
        "NestedCommand": true
    }
] }

autocomplete set dd { [
    {
        "Flags": [ "if=", "of=", "bs=", "iflag=", "oflag=", "count=", "status=" ],
        "FlagValues": {
            "if": [{ 
                "IncFiles": true,
                "AnyValue": true
            }],
            "of": [{ 
                "IncFiles": true,
                "AnyValue": true
            }]
        }
    },
    {
        "Goto": "/0"
    }
] }

private getHostsFile {
    # Parse the hosts file and return uniq host names and IPs
    cat /etc/hosts -> !regexp: 'm/^(#.*|\s*)$/' -> regexp: "s/[\s\t]+/\n/" -> sort -> uniq -> cast: str
    cat ~/.ssh/config -> regexp 'f/Host\s([-.a-zA-Z0-9]+)/' -> cast: str
}

test unit private getHostsFile {
    "StdoutRegex": "[-_.0-9a-zA-Z]+\n",
    "StdoutType":  "str",
    "StdoutBlock": ({
        -> len -> set len;
        if { = len>0 } then {
            out "Len greater than 0"
        } else {
            err "No elements returned"
        }
    }),
    "StdoutIsArray": true
}

autocomplete set ssh { [{
    "Dynamic": ({ getHostsFile })
}] }

autocomplete set ping { [ {
    "Dynamic": ({ getHostsFile })
}] }

autocomplete set rsync { [
    {
        "DynamicDesc": ({
            rsync --help -> @[^Options$..--help]re -> tabulate: --map --split-comma --column-wraps --key-inc-hint
        }),
        "AllowMultiple": true,
        "Optional": true
    },
    {
        "Dynamic": ({ getHostsFile }),
        "AllowMultiple": true
    }
] }

autocomplete set sftp { [ {
    "Dynamic": "{ getHostsFile }"
}] }

private autocomplete.kill {
    # Autocomplete suggestion for `kill`
    test define ps {
        "ExitNum": 0
    }
    
    test define map {
        "StdoutRegex": (\{(".*?":".*?",?)+\})
    }

    ps <test_ps> -A -o pid -o command -> sed 1d -> set ps
    map <test_map> { $ps[:0] } { $ps -> regexp 'f/^[ 0-9]+ (.*)$' }
}

test unit private autocomplete.kill {
    "StdoutType": "json",
    "StdoutRegex": "\\{\\\"[0-9]+\\\":\\\".*?\\\"(,|)\\}"
}

autocomplete set kill {
    [{
        "DynamicDesc": ({ autocomplete.kill }),
        "ListView": true,
        "AllowMultiple": true
    }]
}

autocomplete: set bg {
    [{
        "DynamicDesc": ({ fid-list --stopped }),
        "ListView": true
    }]
}

autocomplete: set fg {
    [{
        "DynamicDesc": ({
            fid-list: --background -> alter -m / ${ fid-list --stopped }
        }),
        "ListView": true
    }]
}

private go-package {
    # returns all the packages in $GOPATH
    find <!null> $GOPATH/src/ -type d -not -path */.* -> sed -r s:$GOPATH/src/::
}

autocomplete set go { [{
    "Flags": [ "help" ],
    "DynamicDesc": ({
        go help -> @[^The commands are..^Use]r -> tabulate: --map
    }),
    "FlagValues": {
        "get": [{
            "Flags": [ "github.com/" ]
        }],
        "run": [{
            "Dynamic": ({ go-package }),
            "AutoBranch": true
        }],
        "test": [{
            "Dynamic": ({ go-package }),
            "AutoBranch": true,
            "Flags": [ "./..." ]
        }],
        "mod": [{
            "DynamicDesc": ({
                go help mod -> @[^The commands are..^Use]r -> tabulate: --map
            })
        }],
        "help": [{
            "DynamicDesc": ({
                go help -> tabulate: --map
            })
        }],
        "build": [{ "Dynamic": ({ go-package }), "AutoBranch": true }],
        "install": [{ "Dynamic": ({ go-package }), "AutoBranch": true }],
        "fmt": [{ "IncFiles": true }],
        "vet": [{ "IncFiles": true }],
        "generate": [{ "IncFiles": true }]
    }
}] }

autocomplete: set zfs {
    [{
        "Dynamic": ({
             zfs ? egrep "^\t[a-z]+" -> regexp 'f/\t+([a-z]+)/' -> uniq 
        })
    }]
}

autocomplete: set zpool {
    [{
        "Dynamic": ({
             zpool ? egrep "^\t[a-z]+" -> regexp 'f/\t+([a-z]+)/' -> uniq 
        })
    }]
}

config eval shell safe-commands {
    -> alter --merge / ([
        "cat", "ps", "grep", "egrep", "ls", "head", "tail", "printf", "awk", "sed", "td", "cut"
    ])
}

if { which bash } then {
    function bash {
        # Wrapper script around GNU bash
        config: set proc strict-arrays false
        config: set proc force-tty true
        
        if { $ARGS -> len -> = -1 } then {
            exec bash @{ $ARGS -> @[1..] }
        
        } else {
            exec bash
        }
    }

    trypipe {
        man-summary: <!null> bash -> set: bash_summary
        summary bash $bash_summary
        !set bash_summary
    }
}

autocomplete set make { [
    {
        "DynamicDesc":  ({
            make --help -> tabulate: --key-inc-hint --map --split-comma --column-wraps
        }),
        "Optional": true,
        "AllowMultiple": true
    },
    {
        "Dynamic": ({
            grep '^[^\.][-a-zA-Z\.0-9_\/]*:' ./Makefile -> regexp 's/:.*//g' -> uniq
        })
    }
] }

if { which: aspell } then {
    config: set shell spellcheck-enabled true
}
