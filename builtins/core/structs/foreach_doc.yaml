- DocumentID: foreach
  Title: >+
    `foreach`
  CategoryID: commands
  Summary: >-
    Iterate through an array
  Description: |-
    `foreach` reads an array or map from STDIN and iterates through it, running
    a code block for each iteration with the value of the iterated element passed
    to it.

    Unlike `foreach`, `formap`'s default output is `str`, so each new line will be
    treated as a list item
  Usage: |-
    `{ code-block }` reads from a variable and writes to an array / unbuffered STDOUT:

    ```
    <stdin> -> foreach variable { code-block } -> <stdout>
    ```

    `{ code-block }` reads from STDIN and writes to an array / unbuffered STDOUT:

    ```
    <stdin> -> foreach { -> code-block } -> <stdout>
    ```

    `foreach` writes to a buffered JSON map:

    ```
    <stdin> -> foreach --jmap variable { code-block (map key) } { code-block (map value) } -> <stdout>
    ```
  Examples: |-
    There are two basic ways you can write a `foreach` loop depending on how you
    want the iterated element passed to the code block.
    
    The first option is to specify a temporary variable which can be read by the
    code block:

    ```
    » a [1..3] -> foreach i { out $i }
    1
    2
    3
    ```

    > Please note that the variable is specified **without** the dollar prefix,
    > then used in the code block **with** the dollar prefix.

    The second option is for the code block's STDIN to read the element:

    ```
    » a [1..3] -> foreach { -> cat }
    1
    2
    3
    ```

    > STDIN can only be read as the first command. If you cannot process the
    > element on the first command then it is recommended you use the first
    > option (passing a variable) instead.

    ### Writing JSON maps

    ```
    » ja [Monday..Friday] -> foreach --jmap day { out $day -> left 3 } { $day }
    {
        "Fri": "Friday",
        "Mon": "Monday",
        "Thu": "Thursday",
        "Tue": "Tuesday",
        "Wed": "Wednesday"
    } 
    ```
  Flags:
    --jmap: >-
      Write a map to STDOUT instead of an array
  Detail: |-
    ### Preserving the data-type

    `foreach` will preserve the data-type read from STDIN in all instances where
    data is being passed along the pipeline:

    * The temporary variable will be created with the same data-type as
      `foreach`'s STDIN
    * The code block's STDIN will have the same data-type as `foreach`'s STDIN
    * `foreeach`'s STDOUT will also be the same data-type as it's STDIN (or `jsonl`
      (jsonlines) where STDIN was `json` because `jsonl` better supports streaming)

    This last point means you may need to `cast` your data if you're writing
    data in a different format. For example the following is creating a YAML list
    however the data-type is defined as `json`:

    ```
    » ja [1..3] -> foreach i { out "- $i" }
    - 1
    - 2
    - 3

    » ja [1..3] -> foreach i { out "- $i" } -> debug -> [[ /Data-Type/Murex ]]
    json
    ```

    Thus any marshalling or other data-type-aware API's would fail because they
    are expecting `json` and receiving an incompatible data format.

    This can be resolved via `cast`:

    ```
    » ja [1..3] -> foreach i { out "- $i" } -> cast yaml
    - 1
    - 2
    - 3

    » ja [1..3] -> foreach i { out "- $i" } -> cast yaml -> debug -> [[ /Data-Type/Murex ]]
    yaml
    ```

    The output is the same but now it's defined as `yaml` so any further pipelined
    processes will now automatically use YAML marshallers when reading that data.
    
    {{ include "gen/includes/for-loop-json-tips.inc.md" }}
  Synonyms:
  Related:
  - formap
  - for
  - while
  - if
  - format
  - cast
  - a
  - ja
  - types/json
  - types/jsonl
  - types/yaml
  - out
  - left
  - debug
  - element
