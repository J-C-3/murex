- DocumentID: f
  Title: >+
    `f`
  CategoryID: commands
  Summary: >-
    Lists objects (eg files) in the current working directory
  Description: |-
    Lists objects (eg files) in the current working directory.
  Usage: |-
    ```
    f: options -> <stdout>
    ```
  Examples: |-
    ```
    # return only directories:
    f: +d

    # return file and directories but exclude symlinks:
    f: +d +f -s
    ```
  Flags:
    f: files
    d: directories
    s: symlinks (automatically included with files and directories)
  Detail: |-
    By default `f` will return no results. It is then your responsibility to select
    which types of objects to be included or excluded from the results.
  Synonyms:
  Related:
  - g
  - rx


- DocumentID: g
  Title: >+
    `g`
  CategoryID: commands
  Summary: >-
    Glob pattern matching for file system objects (eg *.txt)
  Description: |-
    Returns a list of files and directories that match a glob pattern.

    Output is a JSON list.
  Usage: |-
    ```
    g: pattern -> <stdout>

    !g: pattern -> <stdout>
    ```
  Examples: |-
    ```
    # inline globbing
    cat: @{ g: *.txt }

    # writing a JSON array of files to disk
    g: *.txt -> > filelist.json

    # writing a list of files to disk
    g: *.txt -> format str -> > filelist.txt

    # checking if a file exists
    if { g: somefile.txt } then {
        # file exists
    }

    # checking if a file does not exist
    !if { g: somefile.txt } then {
        # file does not exist
    }
    ```
  Detail: |-
    ### Pattern Reference

    * `*` matches any number of (including zero) characters
    * `?` matches any single character

    ### Auto-Globbing

    Any command prefixed with `@g` will be auto-globbed. For example, the two
    following commands will produce the same output:

    ```
    » ls @{g: *.go}
    benchmarks_test.go  defaults_test.go  flags.go  godoc.go  main.go  murex_test.go

    » @g ls: *.go
    benchmarks_test.go  defaults_test.go  flags.go  godoc.go  main.go  murex_test.go
    ```

    The rational behind the ugly `@g` syntax is simply to make one-liners a bit
    less painful when coming from more traditional POSIX-like shells (eg Bash)
    where wildcards are automatically expanded. So if you type `ls *` (for example)
    then realise you've forgotten to subshell, you can just recall the last command
    with auto-globbing enabled:
    
    ```
    @g ^!!
    ```

    ### Inversed Matches

    If you want to exclude any matches based on wildcards, rather than include
    them, then you can use the bang prefix. eg

    ```
    » g: READ*
    [
        "README.md"
    ]

    » !g: *
    Error in `!g` (1,1): No data returned.
    ```
  Synonyms:
  - g
  - "@g"
  - "!g"
  Related:
  - rx
  - f


- DocumentID: rx
  Title: >+
    `rx`
  CategoryID: commands
  Summary: >-
    Regexp pattern matching for file system objects (eg '.*\.txt')
  Description: |-
    Returns a list of files and directories that match a regexp pattern.

    Output is a JSON list.
  Usage: |-
    ```
    rx: pattern -> <stdout>

    !rx: pattern -> <stdout>
    ```
  Examples: |-
    ```
    # inline regex file matching
    cat: @{ rx: '.*\.txt' }

    # writing a list of files to disk
    rx: '.*\.go' -> > filelist.txt

    # checking if any files exist
    if { rx: somefiles.* } then {
        # files exist
    }

    # checking if no files exist
    !if { rx: somefiles.* } then {
        # files do not exist
    }
    ```
  Detail: |-
    ### Traversing Directories

    Unlike globbing (`g`) which can traverse directories (eg `g: /path/*`), `rx` is
    only designed to match file system objects in the current working directory.

    `rx` uses Go (lang)'s standard regexp engine.

    ### Inversed Matches

    If you want to exclude any matches based on wildcards, rather than include
    them, then you can use the bang prefix. eg

    ```
    » rx: READ*                                                                                                                                                              
    [
        "README.md"
    ]
    
    murex-dev» !rx: .*
    Error in `!rx` (1,1): No data returned.
    ```
  Synonyms:
  - rx
  - "!rx"
  Related:
  - g
  - f
  - regexp
  - match